diff --git a/tools/third_party/hyper/http20/connection.py b/tools/third_party/hyper/http20/connection.py
index 31dc7a47d6..00de9a3cef 100644
--- a/tools/third_party/hyper/http20/connection.py
+++ b/tools/third_party/hyper/http20/connection.py
@@ -5,9 +5,9 @@ hyper/http20/connection
 
 Objects that build hyper's connection-level HTTP/2 abstraction.
 """
-import h2.connection
-import h2.events
-import h2.settings
+import h2.connection as h2_connection
+import h2.events as h2_events
+import h2.settings as h2_settings
 
 from ..compat import ssl
 from ..tls import wrap_socket, H2_NPN_PROTOCOLS, H2C_PROTOCOL
@@ -185,7 +185,7 @@ class HTTP20Connection(object):
         users should be strongly discouraged from messing about with connection
         objects themselves.
         """
-        self._conn = _LockedObject(h2.connection.H2Connection())
+        self._conn = _LockedObject(h2_connection.H2Connection())
 
         # Streams are stored in a dictionary keyed off their stream IDs. We
         # also save the most recent one for easy access without having to walk
@@ -387,7 +387,7 @@ class HTTP20Connection(object):
         with self._conn as conn:
             conn.initiate_upgrade_connection()
             conn.update_settings(
-                {h2.settings.ENABLE_PUSH: int(self._enable_push)}
+                {h2_settings.ENABLE_PUSH: int(self._enable_push)}
             )
         self._send_outstanding_data()
 
@@ -408,7 +408,7 @@ class HTTP20Connection(object):
         with self._conn as conn:
             conn.initiate_connection()
             conn.update_settings(
-                {h2.settings.ENABLE_PUSH: int(self._enable_push)}
+                {h2_settings.ENABLE_PUSH: int(self._enable_push)}
             )
         self._send_outstanding_data()
 
@@ -673,10 +673,10 @@ class HTTP20Connection(object):
             self.recent_recv_streams |= stream_ids
 
         for event in events:
-            if isinstance(event, h2.events.DataReceived):
+            if isinstance(event, h2_events.DataReceived):
                 self._adjust_receive_window(event.flow_controlled_length)
                 self.streams[event.stream_id].receive_data(event)
-            elif isinstance(event, h2.events.PushedStreamReceived):
+            elif isinstance(event, h2_events.PushedStreamReceived):
                 if self._enable_push:
                     self._new_stream(event.pushed_stream_id, local_closed=True)
                     self.streams[event.parent_stream_id].receive_push(event)
@@ -686,17 +686,17 @@ class HTTP20Connection(object):
                     # client action undefined when they do it anyway. So we
                     # just refuse the stream and go about our business.
                     self._send_rst_frame(event.pushed_stream_id, 7)
-            elif isinstance(event, h2.events.ResponseReceived):
+            elif isinstance(event, h2_events.ResponseReceived):
                 self.streams[event.stream_id].receive_response(event)
-            elif isinstance(event, h2.events.TrailersReceived):
+            elif isinstance(event, h2_events.TrailersReceived):
                 self.streams[event.stream_id].receive_trailers(event)
-            elif isinstance(event, h2.events.StreamEnded):
+            elif isinstance(event, h2_events.StreamEnded):
                 self.streams[event.stream_id].receive_end_stream(event)
-            elif isinstance(event, h2.events.StreamReset):
+            elif isinstance(event, h2_events.StreamReset):
                 if event.stream_id not in self.reset_streams:
                     self.reset_streams.add(event.stream_id)
                     self.streams[event.stream_id].receive_reset(event)
-            elif isinstance(event, h2.events.ConnectionTerminated):
+            elif isinstance(event, h2_events.ConnectionTerminated):
                 # If we get GoAway with error code zero, we are doing a
                 # graceful shutdown and all is well. Otherwise, throw an
                 # exception.
diff --git a/tools/third_party/hyper/http20/stream.py b/tools/third_party/hyper/http20/stream.py
index 598a14908e..7e42048427 100644
--- a/tools/third_party/hyper/http20/stream.py
+++ b/tools/third_party/hyper/http20/stream.py
@@ -13,7 +13,7 @@ stream is an independent, bi-directional sequence of HTTP headers and data.
 Each stream is identified by a monotonically increasing integer, assigned to
 the stream by the endpoint that initiated the stream.
 """
-import h2.exceptions
+import h2.exceptions as h2_exceptions
 
 from ..common.headers import HTTPHeaderMap
 from .util import h2_safe_headers
@@ -192,7 +192,7 @@ class Stream(object):
                     conn.increment_flow_control_window(
                         increment, stream_id=self.stream_id
                     )
-            except h2.exceptions.StreamClosedError:
+            except h2_exceptions.StreamClosedError:
                 # We haven't got to it yet, but the stream is already
                 # closed. We don't need to increment the window in this
                 # case!
@@ -217,7 +217,7 @@ class Stream(object):
         """
         Provides the headers to the connection object.
         """
-        # Strip any headers invalid in H2.
+        # Strip any headers invalid in H2_
         return h2_safe_headers(self.headers)
 
     def getheaders(self):
@@ -289,7 +289,7 @@ class Stream(object):
             try:
                 with self._conn as conn:
                     conn.reset_stream(self.stream_id, error_code or 0)
-            except h2.exceptions.ProtocolError:
+            except h2_exceptions.ProtocolError:
                 # If for any reason we can't reset the stream, just
                 # tolerate it.
                 pass
diff --git a/tools/third_party/hyper/http20/connection.py b/tools/third_party/hyper/http20/connection.py
index 21cd8dbd7d..bab94a2d46 100644
--- a/tools/third_party/hyper/http20/connection.py
+++ b/tools/third_party/hyper/http20/connection.py
@@ -387,7 +387,7 @@ class HTTP20Connection(object):
         with self._conn as conn:
             conn.initiate_upgrade_connection()
             conn.update_settings(
-                {h2_settings.ENABLE_PUSH: int(self._enable_push)}
+                {h2_settings.SettingCodes.ENABLE_PUSH: int(self._enable_push)}
             )
         self._send_outstanding_data()
 
@@ -408,7 +408,7 @@ class HTTP20Connection(object):
         with self._conn as conn:
             conn.initiate_connection()
             conn.update_settings(
-                {h2_settings.ENABLE_PUSH: int(self._enable_push)}
+                {h2_settings.SettingCodes.ENABLE_PUSH: int(self._enable_push)}
             )
         self._send_outstanding_data()
 
