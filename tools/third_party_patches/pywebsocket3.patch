diff --git a/tools/third_party/pywebsocket3/request_handler.py b/tools/third_party/pywebsocket3/request_handler.py
index 9d89b47c69..e02e2ccf28 100644
--- a/tools/third_party/pywebsocket3/request_handler.py
+++ b/tools/third_party/pywebsocket3/request_handler.py
@@ -219,6 +219,7 @@ class WebSocketRequestHandler(CGIHTTPServer.CGIHTTPRequestHandler):
                 self._logger.info('Request basic authentication')
                 return False
 
+        whole_path = self.path
         host, port, resource = http_header_util.parse_uri(self.path)
         if resource is None:
             self._logger.info('Invalid URI: %r', self.path)
@@ -247,7 +248,7 @@ class WebSocketRequestHandler(CGIHTTPServer.CGIHTTPRequestHandler):
             # Fallback to default http handler for request paths for which
             # we don't have request handlers.
             if not self._options.dispatcher.get_handler_suite(self.path):
-                self._logger.info('No handler for resource: %r', self.path)
+                self._logger.info('No handler for resource: %r', whole_path)
                 self._logger.info('Fallback to CGIHTTPRequestHandler')
                 return True
         except dispatch.DispatchException as e:
diff --git a/tools/third_party/pywebsocket3/websocket_server.py b/tools/third_party/pywebsocket3/websocket_server.py
index e7485ecbef..dab2f079ff 100644
--- a/tools/third_party/pywebsocket3/websocket_server.py
+++ b/tools/third_party/pywebsocket3/websocket_server.py
@@ -157,12 +157,13 @@ class WebSocketServer(socketserver.ThreadingMixIn, BaseHTTPServer.HTTPServer):
                         client_cert_ = ssl.CERT_REQUIRED
                 else:
                     client_cert_ = ssl.CERT_NONE
-                socket_ = ssl.wrap_socket(
-                    socket_,
-                    keyfile=server_options.private_key,
-                    certfile=server_options.certificate,
-                    ca_certs=server_options.tls_client_ca,
-                    cert_reqs=client_cert_)
+                ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
+                ssl_context.verify_mode = client_cert_
+                ssl_context.load_cert_chain(keyfile=server_options.private_key,
+                                            certfile=server_options.certificate)
+                if client_cert_ != ssl.CERT_NONE:
+                    ssl_context.load_verify_locations(cafile=server_options.tls_client_ca)
+                socket_ = ssl_context.wrap_socket(socket_, server_side=True)
             self._sockets.append((socket_, addrinfo))
 
     def server_bind(self):
diff --git a/tools/third_party/pywebsocket3/msgutil.py b/tools/third_party/pywebsocket3/msgutil.py
index dd6a6fc410..b9918ee6e9 100644
--- a/tools/third_party/pywebsocket3/msgutil.py
+++ b/tools/third_party/pywebsocket3/msgutil.py
@@ -39,7 +39,7 @@ from __future__ import absolute_import
 
 import threading
 
-import six.moves.queue
+import queue
 
 # Export Exception symbols from msgutil for backward compatibility
 from pywebsocket3._stream_exceptions import (
@@ -124,7 +124,7 @@ class MessageReceiver(threading.Thread):
 
         threading.Thread.__init__(self)
         self._request = request
-        self._queue = six.moves.queue.Queue()
+        self._queue = queue.Queue()
         self._onmessage = onmessage
         self._stop_requested = False
         self.setDaemon(True)
@@ -157,7 +157,7 @@ class MessageReceiver(threading.Thread):
         """
         try:
             message = self._queue.get_nowait()
-        except six.moves.queue.Empty:
+        except queue.Empty:
             message = None
         return message
 
@@ -189,7 +189,7 @@ class MessageSender(threading.Thread):
         """
         threading.Thread.__init__(self)
         self._request = request
-        self._queue = six.moves.queue.Queue()
+        self._queue = queue.Queue()
         self.setDaemon(True)
         self.start()
 
diff --git a/tools/third_party/pywebsocket3/http_header_util.py b/tools/third_party/pywebsocket3/http_header_util.py
index 63e698bc16..1df24e7afa 100644
--- a/tools/third_party/pywebsocket3/http_header_util.py
+++ b/tools/third_party/pywebsocket3/http_header_util.py
@@ -32,7 +32,7 @@ in HTTP RFC http://www.ietf.org/rfc/rfc2616.txt.
 
 from __future__ import absolute_import
 
-import six.moves.urllib.parse
+from urllib.parse import urlsplit
 
 
 _SEPARATORS = '()<>@,;:\\"/[]?={} \t'
@@ -216,7 +216,7 @@ def quote_if_necessary(s):
 def parse_uri(uri):
     """Parse absolute URI then return host, port and resource."""
 
-    parsed = six.moves.urllib.parse.urlsplit(uri)
+    parsed = urlsplit(uri)
     if parsed.scheme != 'wss' and parsed.scheme != 'ws':
         # |uri| must be a relative URI.
         # TODO(toyoshim): Should validate |uri|.
