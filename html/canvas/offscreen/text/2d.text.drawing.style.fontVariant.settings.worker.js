// DO NOT EDIT! This test has been generated by /html/canvas/tools/gentest.py.
// OffscreenCanvas test in a worker:2d.text.drawing.style.fontVariant.settings
// Description:Testing basic functionalities of fontKerning for canvas
// Note:

importScripts("/resources/testharness.js");
importScripts("/html/canvas/resources/canvas-tests.js");

var t = async_test("Testing basic functionalities of fontKerning for canvas");
var t_pass = t.done.bind(t);
var t_fail = t.step_func(function(reason) {
    throw reason;
});
t.step(function() {

var offscreenCanvas = new OffscreenCanvas(100, 50);
var ctx = offscreenCanvas.getContext('2d');

// Setting fontVariantCaps with lower cases
_assertSame(ctx.fontVariantCaps, "Normal", "ctx.fontVariantCaps", "\"Normal\"");

ctx.fontVariantCaps = "normal";
_assertSame(ctx.fontVariantCaps, "Normal", "ctx.fontVariantCaps", "\"Normal\"");

ctx.fontVariantCaps = "small-caps";
_assertSame(ctx.fontVariantCaps, "SmallCaps", "ctx.fontVariantCaps", "\"SmallCaps\"");

ctx.fontVariantCaps = "all-small-caps";
_assertSame(ctx.fontVariantCaps, "AllSmallCaps", "ctx.fontVariantCaps", "\"AllSmallCaps\"");

ctx.fontVariantCaps = "petite-caps";
_assertSame(ctx.fontVariantCaps, "PetiteCaps", "ctx.fontVariantCaps", "\"PetiteCaps\"");

ctx.fontVariantCaps = "all-petite-caps";
_assertSame(ctx.fontVariantCaps, "AllPetiteCaps", "ctx.fontVariantCaps", "\"AllPetiteCaps\"");

ctx.fontVariantCaps = "unicase";
_assertSame(ctx.fontVariantCaps, "Unicase", "ctx.fontVariantCaps", "\"Unicase\"");

ctx.fontVariantCaps = "titling-caps";
_assertSame(ctx.fontVariantCaps, "TitlingCaps", "ctx.fontVariantCaps", "\"TitlingCaps\"");

// Setting fontVariantCaps with lower cases and upper cases word.
ctx.fontVariantCaps = "nORmal";
_assertSame(ctx.fontVariantCaps, "Normal", "ctx.fontVariantCaps", "\"Normal\"");

ctx.fontVariantCaps = "smaLL-caps";
_assertSame(ctx.fontVariantCaps, "SmallCaps", "ctx.fontVariantCaps", "\"SmallCaps\"");

ctx.fontVariantCaps = "all-small-CAPS";
_assertSame(ctx.fontVariantCaps, "AllSmallCaps", "ctx.fontVariantCaps", "\"AllSmallCaps\"");

ctx.fontVariantCaps = "pEtitE-caps";
_assertSame(ctx.fontVariantCaps, "PetiteCaps", "ctx.fontVariantCaps", "\"PetiteCaps\"");

ctx.fontVariantCaps = "All-Petite-Caps";
_assertSame(ctx.fontVariantCaps, "AllPetiteCaps", "ctx.fontVariantCaps", "\"AllPetiteCaps\"");

ctx.fontVariantCaps = "uNIcase";
_assertSame(ctx.fontVariantCaps, "Unicase", "ctx.fontVariantCaps", "\"Unicase\"");

ctx.fontVariantCaps = "titling-CAPS";
_assertSame(ctx.fontVariantCaps, "TitlingCaps", "ctx.fontVariantCaps", "\"TitlingCaps\"");

// Setting fontVariantCaps with non-existing font variant.
ctx.fontVariantCaps = "abcd";
_assertSame(ctx.fontVariantCaps, "TitlingCaps", "ctx.fontVariantCaps", "\"TitlingCaps\"");
t.done();

});
done();
