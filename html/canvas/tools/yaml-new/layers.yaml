- name: 2d.layer.global-states
  desc: Checks that layers correctly use global render states.
  size: 200, 200
  code: |
    ctx.fillStyle = 'rgba(0, 0, 255, 1)';

    var circle = new Path2D();
    circle.arc(90, 90, 45, 0, 2 * Math.PI);
    ctx.fill(circle);

    %(render_states)s

    ctx.beginLayer();

    ctx.fillStyle = 'rgba(225, 0, 0, 1)';
    ctx.fillRect(50, 50, 75, 50);
    ctx.fillStyle = 'rgba(0, 255, 0, 1)';
    ctx.fillRect(70, 70, 75, 50);

    ctx.endLayer();
  reference: |
    ctx.fillStyle = 'rgba(0, 0, 255, 1)';

    var circle = new Path2D();
    circle.arc(90, 90, 45, 0, 2 * Math.PI);
    ctx.fill(circle);

    %(render_states)s

    canvas2 = document.createElement("canvas");
    ctx2 = canvas2.getContext("2d");

    ctx2.fillStyle = 'rgba(225, 0, 0, 1)';
    ctx2.fillRect(50, 50, 75, 50);
    ctx2.fillStyle = 'rgba(0, 255, 0, 1)';
    ctx2.fillRect(70, 70, 75, 50);

    ctx.drawImage(canvas2, 0, 0);
  variants:
    no_global_states:
      render_states: // No global states.
    alpha:
      render_states: ctx.globalAlpha = 0.6;
    globalcompositeoperation:
      render_states: ctx.globalCompositeOperation = 'source-in';
    shadow:
      render_states: |-
        ctx.shadowOffsetX = -10;
        ctx.shadowOffsetY = 10;
        ctx.shadowColor = 'orange';
    filter:
      render_states: ctx.filter = 'sepia(1) opacity(30%)';
    alpha.shadow:
      render_states: |-
        ctx.globalAlpha = 0.5;
        ctx.shadowOffsetX = -10;
        ctx.shadowOffsetY = 10;
        ctx.shadowColor = 'orange';
    alpha.filter:
      render_states: |-
        ctx.globalAlpha = 0.6;
        ctx.filter = 'drop-shadow(-9px 9px 0px #e81)';
    alpha.filter.shadow:
      fuzzy: maxDifference=0-2; totalPixels=0-5824
      render_states: |-
        ctx.globalAlpha = 0.5;
        ctx.filter = 'sepia(0.5) drop-shadow(5px 5px 0px #81e)';
        ctx.shadowOffsetX = -10;
        ctx.shadowOffsetY = 10;
        ctx.shadowColor = 'orange';
    alpha.filter.globalcompositeoperation:
      render_states: |-
        ctx.globalAlpha = 0.6;
        ctx.globalCompositeOperation = 'source-in';
        ctx.filter = 'drop-shadow(-9px 9px 0px #e81)';
    filter.shadow:
      fuzzy: maxDifference=0-1; totalPixels=0-49
      render_states: |-
        ctx.filter = 'sepia(1) opacity(70%)';
        ctx.shadowOffsetX = -10;
        ctx.shadowOffsetY = 10;
        ctx.shadowColor = 'rgba(0,1,0,0.5)';
    filter.globalcompositeoperation:
      render_states: |-
        ctx.globalCompositeOperation = 'source-in';
        ctx.filter = 'drop-shadow(-9px 9px 0px #e81)';


- name: 2d.layer.nested
  desc: Tests nested canvas layers.
  size: 200, 200
  code: |
    var circle = new Path2D();
    circle.arc(90, 90, 40, 0, 2 * Math.PI);
    ctx.fill(circle);

    ctx.globalCompositeOperation = 'source-in';

    ctx.beginLayer();

    ctx.fillStyle = 'rgba(0, 0, 255, 1)';
    ctx.fillRect(60, 60, 75, 50);

    ctx.globalAlpha = 0.5;

    ctx.beginLayer();

    ctx.fillStyle = 'rgba(225, 0, 0, 1)';
    ctx.fillRect(50, 50, 75, 50);
    ctx.fillStyle = 'rgba(0, 255, 0, 1)';
    ctx.fillRect(70, 70, 75, 50);

    ctx.endLayer();
    ctx.endLayer();
  reference: |
    var circle = new Path2D();
    circle.arc(90, 90, 40, 0, 2 * Math.PI);
    ctx.fill(circle);

    ctx.globalCompositeOperation = 'source-in';

    canvas2 = document.createElement("canvas");
    ctx2 = canvas2.getContext("2d");

    ctx2.fillStyle = 'rgba(0, 0, 255, 1)';
    ctx2.fillRect(60, 60, 75, 50);

    ctx2.globalAlpha = 0.5;

    canvas3 = document.createElement("canvas");
    ctx3 = canvas3.getContext("2d");

    ctx3.fillStyle = 'rgba(225, 0, 0, 1)';
    ctx3.fillRect(50, 50, 75, 50);
    ctx3.fillStyle = 'rgba(0, 255, 0, 1)';
    ctx3.fillRect(70, 70, 75, 50);

    ctx2.drawImage(canvas3, 0, 0);
    ctx.drawImage(canvas2, 0, 0);


- name: 2d.layer.restore-style
  desc: Test that ensure layers restores style values upon endLayer.
  size: 200, 200
  fuzzy: maxDifference=0-1; totalPixels=0-950
  code: |
    ctx.fillStyle = 'rgba(0,0,255,1)';
    ctx.fillRect(50, 50, 75, 50);
    ctx.globalAlpha = 0.5;

    ctx.beginLayer();
    ctx.fillStyle = 'rgba(225, 0, 0, 1)';
    ctx.fillRect(60, 60, 75, 50);
    ctx.endLayer();

    ctx.fillRect(70, 70, 75, 50);
  reference: |
    ctx.fillStyle = 'rgba(0, 0, 255, 1)';
    ctx.fillRect(50, 50, 75, 50);
    ctx.globalAlpha = 0.5;

    canvas2 = document.createElement("canvas");
    ctx2 = canvas2.getContext("2d");
    ctx2.fillStyle = 'rgba(225, 0, 0, 1)';
    ctx2.fillRect(60, 60, 75, 50);
    ctx.drawImage(canvas2, 0, 0);

    ctx.fillRect(70, 70, 75, 50);


- name: 2d.layer.several-complex
  desc: >-
    Test to ensure beginlayer works for filter, alpha and shadow, even with
    consecutive layers.
  size: 500, 500
  fuzzy: maxDifference=0-3; totalPixels=0-6318
  code: |
    ctx.fillStyle = 'rgba(0, 0, 255, 1)';
    ctx.fillRect(50, 50, 95, 70);

    ctx.globalAlpha = 0.5;
    ctx.filter = 'sepia(0.5)';
    ctx.shadowOffsetX = -10;
    ctx.shadowOffsetY = 10;
    ctx.shadowColor = 'orange';


    for (let i = 0; i < 5; i++) {
      ctx.beginLayer();

      ctx.fillStyle = 'rgba(225, 0, 0, 1)';
      ctx.fillRect(60 + i, 40 + i, 75, 50);
      ctx.fillStyle = 'rgba(0, 255, 0, 1)';
      ctx.fillRect(80 + i, 60 + i, 75, 50);

      ctx.endLayer();
    }
  reference: |
    ctx.fillStyle = 'rgba(0, 0, 255, 1)';
    ctx.fillRect(50, 50, 95, 70);

    ctx.globalAlpha = 0.5;
    ctx.filter = 'sepia(0.5)';
    ctx.shadowOffsetX = -10;
    ctx.shadowOffsetY = 10;
    ctx.shadowColor = 'orange';

    var canvas2 = [5];
    var ctx2 = [5];

    for (let i = 0; i < 5; i++) {
      canvas2[i] = document.createElement("canvas");
      ctx2[i] = canvas2[i].getContext("2d");
      ctx2[i].fillStyle = 'rgba(225, 0, 0, 1)';
      ctx2[i].fillRect(60, 40, 75, 50);
      ctx2[i].fillStyle = 'rgba(0, 255, 0, 1)';
      ctx2[i].fillRect(80, 60, 75, 50);

      ctx.drawImage(canvas2[i], i, i);
    }


- name: 2d.layer.endlayer.unmatched
  desc: >-
    A test to make sure an unmatched endLayer is a no-op and has no effect on
    the code following it.
  size: 200, 200
  code: |
    ctx.fillStyle = 'rgba(0, 0, 255, 1)';
    ctx.fillRect(60, 60, 75, 50);

    ctx.globalAlpha = 0.5;

    // This endlayer call should no-op.
    ctx.endLayer();

    ctx.beginLayer();
    ctx.fillStyle = 'rgba(225, 0, 0, 1)';
    ctx.fillRect(50, 50, 75, 50);
    ctx.fillStyle = 'rgba(0, 255, 0, 1)';
    ctx.fillRect(70, 70, 75, 50);
    ctx.endLayer();
  reference: |
    ctx.fillStyle = 'rgba(0, 0, 255, 1)';
    ctx.fillRect(60, 60, 75, 50);

    ctx.globalAlpha = 0.5;

    ctx.beginLayer();
    ctx.fillStyle = 'rgba(225, 0, 0, 1)';
    ctx.fillRect(50, 50, 75, 50);
    ctx.fillStyle = 'rgba(0, 255, 0, 1)';
    ctx.fillRect(70, 70, 75, 50);
    ctx.endLayer();


- name: 2d.layer.endlayer.alone
  desc: A test to make sure a single endLayer with no beginLayer is a no-op.
  size: 200, 200
  code: |
    ctx.fillStyle = 'rgba(0, 0, 255, 1)';
    ctx.fillRect(60, 60, 75, 50);
    ctx.globalAlpha = 0.5;

    ctx.fillStyle = 'rgba(225, 0, 0, 1)';
    ctx.fillRect(50, 50, 75, 50);
    ctx.fillStyle = 'rgba(0, 255, 0, 1)';
    ctx.fillRect(70, 70, 75, 50);

    ctx.endLayer();
  reference: |
    ctx.fillStyle = 'rgba(0, 0, 255, 1)';
    ctx.fillRect(60, 60, 75, 50);
    ctx.globalAlpha = 0.5;

    ctx.fillStyle = 'rgba(225, 0, 0, 1)';
    ctx.fillRect(50, 50, 75, 50);
    ctx.fillStyle = 'rgba(0, 255, 0, 1)';
    ctx.fillRect(70, 70, 75, 50);
